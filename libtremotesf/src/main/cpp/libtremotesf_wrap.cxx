/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGJAVA
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
#include <pthread.h>
#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
    static void detach(void *jvm) {
      static_cast<JavaVM *>(jvm)->DetachCurrentThread();
    }

    static void make_detach_key() {
      pthread_key_create(&detach_key_, detach);
    }

    /* thread-local key to register a destructor */
    static pthread_key_t detach_key_;
#endif

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
  pthread_key_t JObjectWrapper::detach_key_;
#endif

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif

#if defined(SWIG_JAVA_DETACH_ON_THREAD_END)
        // At least on Android 6, detaching after every call causes a memory leak.
        // Instead, register a thread desructor and detach only when the thread ends.
        // See https://developer.android.com/training/articles/perf-jni#threads
        static pthread_once_t once = PTHREAD_ONCE_INIT;

        pthread_once(&once, JObjectWrapper::make_detach_key);
        pthread_setspecific(JObjectWrapper::detach_key_, director->swig_jvm_);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_DETACH_ON_THREAD_END) && !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    struct SwigDirectorMethod {
      const char *name;
      const char *desc;
      jmethodID methid;
      SwigDirectorMethod(JNIEnv *jenv, jclass baseclass, const char *name, const char *desc) : name(name), desc(desc) {
        methid = jenv->GetMethodID(baseclass, name, desc);
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

    jclass swig_new_global_ref(JNIEnv *jenv, const char *classname) {
      jclass clz = jenv->FindClass(classname);
      return clz ? (jclass)jenv->NewGlobalRef(clz) : 0;
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_libtremotesfJNI = NULL;
    jmethodID director_method_ids[15];
  }
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "libtremotesf/rpc.h"
#include "libtremotesf/torrent.h"
#include "libtremotesf/tracker.h"
#include "libtremotesf/serverstats.h"
#include "libtremotesf/serversettings.h"
#include "jnirpc.h"


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< libtremotesf::TorrentData > *new_std_vector_Sl_libtremotesf_TorrentData_Sg___SWIG_2(jint count,libtremotesf::TorrentData const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< libtremotesf::TorrentData >(static_cast<std::vector< libtremotesf::TorrentData >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_libtremotesf_TorrentData_Sg__doSize(std::vector< libtremotesf::TorrentData > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_libtremotesf_TorrentData_Sg__doAdd__SWIG_0(std::vector< libtremotesf::TorrentData > *self,std::vector< libtremotesf::TorrentData >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_libtremotesf_TorrentData_Sg__doAdd__SWIG_1(std::vector< libtremotesf::TorrentData > *self,jint index,std::vector< libtremotesf::TorrentData >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::TorrentData >::value_type std_vector_Sl_libtremotesf_TorrentData_Sg__doRemove(std::vector< libtremotesf::TorrentData > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          libtremotesf::TorrentData const old_value = SWIG_STD_MOVE((*self)[index]);
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::TorrentData >::value_type const &std_vector_Sl_libtremotesf_TorrentData_Sg__doGet(std::vector< libtremotesf::TorrentData > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< libtremotesf::TorrentData >::value_type std_vector_Sl_libtremotesf_TorrentData_Sg__doSet(std::vector< libtremotesf::TorrentData > *self,jint index,std::vector< libtremotesf::TorrentData >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          libtremotesf::TorrentData const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_libtremotesf_TorrentData_Sg__doRemoveRange(std::vector< libtremotesf::TorrentData > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::Tracker > *new_std_vector_Sl_libtremotesf_Tracker_Sg___SWIG_2(jint count,libtremotesf::Tracker const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< libtremotesf::Tracker >(static_cast<std::vector< libtremotesf::Tracker >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_libtremotesf_Tracker_Sg__doSize(std::vector< libtremotesf::Tracker > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_libtremotesf_Tracker_Sg__doAdd__SWIG_0(std::vector< libtremotesf::Tracker > *self,std::vector< libtremotesf::Tracker >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_libtremotesf_Tracker_Sg__doAdd__SWIG_1(std::vector< libtremotesf::Tracker > *self,jint index,std::vector< libtremotesf::Tracker >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::Tracker >::value_type std_vector_Sl_libtremotesf_Tracker_Sg__doRemove(std::vector< libtremotesf::Tracker > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          libtremotesf::Tracker const old_value = SWIG_STD_MOVE((*self)[index]);
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::Tracker >::value_type const &std_vector_Sl_libtremotesf_Tracker_Sg__doGet(std::vector< libtremotesf::Tracker > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< libtremotesf::Tracker >::value_type std_vector_Sl_libtremotesf_Tracker_Sg__doSet(std::vector< libtremotesf::Tracker > *self,jint index,std::vector< libtremotesf::Tracker >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          libtremotesf::Tracker const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_libtremotesf_Tracker_Sg__doRemoveRange(std::vector< libtremotesf::Tracker > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::TorrentFile > *new_std_vector_Sl_libtremotesf_TorrentFile_Sg___SWIG_2(jint count,libtremotesf::TorrentFile const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< libtremotesf::TorrentFile >(static_cast<std::vector< libtremotesf::TorrentFile >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_libtremotesf_TorrentFile_Sg__doSize(std::vector< libtremotesf::TorrentFile > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_libtremotesf_TorrentFile_Sg__doAdd__SWIG_0(std::vector< libtremotesf::TorrentFile > *self,std::vector< libtremotesf::TorrentFile >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_libtremotesf_TorrentFile_Sg__doAdd__SWIG_1(std::vector< libtremotesf::TorrentFile > *self,jint index,std::vector< libtremotesf::TorrentFile >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::TorrentFile >::value_type std_vector_Sl_libtremotesf_TorrentFile_Sg__doRemove(std::vector< libtremotesf::TorrentFile > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          libtremotesf::TorrentFile const old_value = SWIG_STD_MOVE((*self)[index]);
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::TorrentFile >::value_type const &std_vector_Sl_libtremotesf_TorrentFile_Sg__doGet(std::vector< libtremotesf::TorrentFile > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< libtremotesf::TorrentFile >::value_type std_vector_Sl_libtremotesf_TorrentFile_Sg__doSet(std::vector< libtremotesf::TorrentFile > *self,jint index,std::vector< libtremotesf::TorrentFile >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          libtremotesf::TorrentFile const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_libtremotesf_TorrentFile_Sg__doRemoveRange(std::vector< libtremotesf::TorrentFile > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::Peer > *new_std_vector_Sl_libtremotesf_Peer_Sg___SWIG_2(jint count,libtremotesf::Peer const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< libtremotesf::Peer >(static_cast<std::vector< libtremotesf::Peer >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_libtremotesf_Peer_Sg__doSize(std::vector< libtremotesf::Peer > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_libtremotesf_Peer_Sg__doAdd__SWIG_0(std::vector< libtremotesf::Peer > *self,std::vector< libtremotesf::Peer >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_libtremotesf_Peer_Sg__doAdd__SWIG_1(std::vector< libtremotesf::Peer > *self,jint index,std::vector< libtremotesf::Peer >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::Peer >::value_type std_vector_Sl_libtremotesf_Peer_Sg__doRemove(std::vector< libtremotesf::Peer > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          libtremotesf::Peer const old_value = SWIG_STD_MOVE((*self)[index]);
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< libtremotesf::Peer >::value_type const &std_vector_Sl_libtremotesf_Peer_Sg__doGet(std::vector< libtremotesf::Peer > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< libtremotesf::Peer >::value_type std_vector_Sl_libtremotesf_Peer_Sg__doSet(std::vector< libtremotesf::Peer > *self,jint index,std::vector< libtremotesf::Peer >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          libtremotesf::Peer const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_libtremotesf_Peer_Sg__doRemoveRange(std::vector< libtremotesf::Peer > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< QString > *new_std_vector_Sl_QString_Sg___SWIG_2(jint count,QString const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< QString >(static_cast<std::vector< QString >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_QString_Sg__doSize(std::vector< QString > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_QString_Sg__doAdd__SWIG_0(std::vector< QString > *self,std::vector< QString >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_QString_Sg__doAdd__SWIG_1(std::vector< QString > *self,jint index,std::vector< QString >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< QString >::value_type std_vector_Sl_QString_Sg__doRemove(std::vector< QString > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          QString const old_value = SWIG_STD_MOVE((*self)[index]);
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< QString >::value_type const &std_vector_Sl_QString_Sg__doGet(std::vector< QString > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< QString >::value_type std_vector_Sl_QString_Sg__doSet(std::vector< QString > *self,jint index,std::vector< QString >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          QString const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_QString_Sg__doRemoveRange(std::vector< QString > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::map< QString,QString,std::less< QString > >::iterator std_map_Sl_QString_Sc_QString_Sg__iterator_getNextUnchecked(std::map< QString,QString >::iterator *self){
          std::map< QString, QString, std::less< QString > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_QString_Sc_QString_Sg__iterator_isNot(std::map< QString,QString >::iterator const *self,std::map< QString,QString >::iterator other){
          return (*self != other);
        }
SWIGINTERN QString std_map_Sl_QString_Sc_QString_Sg__iterator_getKey(std::map< QString,QString >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN QString std_map_Sl_QString_Sc_QString_Sg__iterator_getValue(std::map< QString,QString >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_QString_Sc_QString_Sg__iterator_setValue(std::map< QString,QString >::iterator *self,QString const &newValue){
          (*self)->second = newValue;
        }

  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_QString_Sc_QString_Sg__sizeImpl(std::map< QString,QString > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_QString_Sc_QString_Sg__containsImpl(std::map< QString,QString > *self,QString const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_QString_Sc_QString_Sg__putUnchecked(std::map< QString,QString > *self,QString const &key,QString const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_QString_Sc_QString_Sg__removeUnchecked(std::map< QString,QString > *self,std::map< QString,QString,std::less< QString > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(jint count,int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< int >(static_cast<std::vector< int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int_Sg__doSize(std::vector< int > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_0(std::vector< int > *self,std::vector< int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int_Sg__doAdd__SWIG_1(std::vector< int > *self,jint index,std::vector< int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doRemove(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          int const old_value = SWIG_STD_MOVE((*self)[index]);
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__doGet(std::vector< int > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__doSet(std::vector< int > *self,jint index,std::vector< int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sg__doRemoveRange(std::vector< int > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::pair< int,int > > *new_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg___SWIG_2(jint count,std::pair< int,int > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::pair< int,int > >(static_cast<std::vector< std::pair< int,int > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doSize(std::vector< std::pair< int,int > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doAdd__SWIG_0(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doAdd__SWIG_1(std::vector< std::pair< int,int > > *self,jint index,std::vector< std::pair< int,int > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::pair< int,int > >::value_type std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doRemove(std::vector< std::pair< int,int > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::pair< int,int > const old_value = SWIG_STD_MOVE((*self)[index]);
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::pair< int,int > >::value_type const &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doGet(std::vector< std::pair< int,int > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::pair< int,int > >::value_type std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doSet(std::vector< std::pair< int,int > > *self,jint index,std::vector< std::pair< int,int > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::pair< int,int > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doRemoveRange(std::vector< std::pair< int,int > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#include <memory>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "libtremotesf_wrap.h"

SwigDirector_JniRpc::SwigDirector_JniRpc(JNIEnv *jenv) : libtremotesf::JniRpc(), Swig::Director(jenv) {
}

SwigDirector_JniRpc::~SwigDirector_JniRpc() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_JniRpc::onAboutToDisconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onAboutToDisconnect.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onAboutToDisconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onConnectionStateChanged(libtremotesf::RpcConnectionState status) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jstatus  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onConnectionStateChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstatus = (jint) status;
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[1], swigjobj, jstatus);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onConnectionStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onErrorChanged(libtremotesf::RpcError error,QString const &errorMessage,QString const &detailedConnectionErrorMessage) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jerror  ;
  jstring jerrorMessage = 0 ;
  jstring jdetailedConnectionErrorMessage = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onErrorChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jerror = (jint) error;
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&errorMessage)->utf16())>) == sizeof(jchar));
    jerrorMessage = jenv->NewString(reinterpret_cast<const jchar*>((&errorMessage)->utf16()), static_cast<jsize>((&errorMessage)->size()));
    
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&detailedConnectionErrorMessage)->utf16())>) == sizeof(jchar));
    jdetailedConnectionErrorMessage = jenv->NewString(reinterpret_cast<const jchar*>((&detailedConnectionErrorMessage)->utf16()), static_cast<jsize>((&detailedConnectionErrorMessage)->size()));
    
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[2], swigjobj, jerror, jerrorMessage, jdetailedConnectionErrorMessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onErrorChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onServerSettingsChanged(libtremotesf::JniServerSettingsData data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onServerSettingsChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((libtremotesf::JniServerSettingsData **)&jdata) = new libtremotesf::JniServerSettingsData(SWIG_STD_MOVE(data)); 
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[3], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onServerSettingsChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentsUpdated(std::vector< std::pair< int,int > > &&removedIndexRanges,std::vector< libtremotesf::TorrentData > &&changed,std::vector< libtremotesf::TorrentData > &&added) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jremovedIndexRanges  ;
  jlong jchanged  ;
  jlong jadded  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentsUpdated.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< std::pair< int,int > > **)&jremovedIndexRanges = (std::vector< std::pair< int,int > > *) &removedIndexRanges; 
    *(std::vector< libtremotesf::TorrentData > **)&jchanged = (std::vector< libtremotesf::TorrentData > *) &changed; 
    *(std::vector< libtremotesf::TorrentData > **)&jadded = (std::vector< libtremotesf::TorrentData > *) &added; 
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[4], swigjobj, jremovedIndexRanges, jchanged, jadded);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentsUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentFilesUpdated(int torrentId,std::vector< libtremotesf::TorrentFile > &&changed) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtorrentId  ;
  jlong jchanged  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentFilesUpdated.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtorrentId = (jint) torrentId;
    *(std::vector< libtremotesf::TorrentFile > **)&jchanged = (std::vector< libtremotesf::TorrentFile > *) &changed; 
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[5], swigjobj, jtorrentId, jchanged);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentFilesUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentPeersUpdated(int torrentId,std::vector< std::pair< int,int > > &&removedIndexRanges,std::vector< libtremotesf::Peer > &&changed,std::vector< libtremotesf::Peer > &&added) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtorrentId  ;
  jlong jremovedIndexRanges  ;
  jlong jchanged  ;
  jlong jadded  ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentPeersUpdated.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtorrentId = (jint) torrentId;
    *(std::vector< std::pair< int,int > > **)&jremovedIndexRanges = (std::vector< std::pair< int,int > > *) &removedIndexRanges; 
    *(std::vector< libtremotesf::Peer > **)&jchanged = (std::vector< libtremotesf::Peer > *) &changed; 
    *(std::vector< libtremotesf::Peer > **)&jadded = (std::vector< libtremotesf::Peer > *) &added; 
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[6], swigjobj, jtorrentId, jremovedIndexRanges, jchanged, jadded);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentPeersUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onServerStatsUpdated(long long downloadSpeed,long long uploadSpeed,libtremotesf::SessionStats currentSession,libtremotesf::SessionStats total) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdownloadSpeed  ;
  jlong juploadSpeed  ;
  jlong jcurrentSession  ;
  jlong jtotal  ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onServerStatsUpdated.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdownloadSpeed = (jlong) downloadSpeed;
    juploadSpeed = (jlong) uploadSpeed;
    jcurrentSession = 0;
    *((libtremotesf::SessionStats **)&jcurrentSession) = new libtremotesf::SessionStats(SWIG_STD_MOVE(currentSession)); 
    jtotal = 0;
    *((libtremotesf::SessionStats **)&jtotal) = new libtremotesf::SessionStats(SWIG_STD_MOVE(total)); 
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[7], swigjobj, jdownloadSpeed, juploadSpeed, jcurrentSession, jtotal);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onServerStatsUpdated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentAdded(int id,QString const &hashString,QString const &name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jid  ;
  jstring jhashString = 0 ;
  jstring jname = 0 ;
  
  if (!swig_override[8]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentAdded.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = (jint) id;
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&hashString)->utf16())>) == sizeof(jchar));
    jhashString = jenv->NewString(reinterpret_cast<const jchar*>((&hashString)->utf16()), static_cast<jsize>((&hashString)->size()));
    
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&name)->utf16())>) == sizeof(jchar));
    jname = jenv->NewString(reinterpret_cast<const jchar*>((&name)->utf16()), static_cast<jsize>((&name)->size()));
    
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[8], swigjobj, jid, jhashString, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentAdded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentFinished(int id,QString const &hashString,QString const &name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jid  ;
  jstring jhashString = 0 ;
  jstring jname = 0 ;
  
  if (!swig_override[9]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentFinished.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = (jint) id;
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&hashString)->utf16())>) == sizeof(jchar));
    jhashString = jenv->NewString(reinterpret_cast<const jchar*>((&hashString)->utf16()), static_cast<jsize>((&hashString)->size()));
    
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&name)->utf16())>) == sizeof(jchar));
    jname = jenv->NewString(reinterpret_cast<const jchar*>((&name)->utf16()), static_cast<jsize>((&name)->size()));
    
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[9], swigjobj, jid, jhashString, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentFinished ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentAddDuplicate() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[10]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentAddDuplicate.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[10], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentAddDuplicate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentAddError() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentAddError.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[11], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentAddError ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onTorrentFileRenamed(int torrentId,QString const &filePath,QString const &newName) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtorrentId  ;
  jstring jfilePath = 0 ;
  jstring jnewName = 0 ;
  
  if (!swig_override[12]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onTorrentFileRenamed.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtorrentId = (jint) torrentId;
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&filePath)->utf16())>) == sizeof(jchar));
    jfilePath = jenv->NewString(reinterpret_cast<const jchar*>((&filePath)->utf16()), static_cast<jsize>((&filePath)->size()));
    
    
    static_assert(sizeof(std::remove_pointer_t<decltype((&newName)->utf16())>) == sizeof(jchar));
    jnewName = jenv->NewString(reinterpret_cast<const jchar*>((&newName)->utf16()), static_cast<jsize>((&newName)->size()));
    
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[12], swigjobj, jtorrentId, jfilePath, jnewName);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onTorrentFileRenamed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onGotDownloadDirFreeSpace(long long bytes) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbytes  ;
  
  if (!swig_override[13]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onGotDownloadDirFreeSpace.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbytes = (jlong) bytes;
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[13], swigjobj, jbytes);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onGotDownloadDirFreeSpace ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::onGotFreeSpaceForPath(QString const &path,bool success,long long bytes) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath = 0 ;
  jboolean jsuccess  ;
  jlong jbytes  ;
  
  if (!swig_override[14]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method libtremotesf::JniRpc::onGotFreeSpaceForPath.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    static_assert(sizeof(std::remove_pointer_t<decltype((&path)->utf16())>) == sizeof(jchar));
    jpath = jenv->NewString(reinterpret_cast<const jchar*>((&path)->utf16()), static_cast<jsize>((&path)->size()));
    
    jsuccess = (jboolean) success;
    jbytes = (jlong) bytes;
    jenv->CallStaticVoidMethod(Swig::jclass_libtremotesfJNI, Swig::director_method_ids[14], swigjobj, jpath, jsuccess, jbytes);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in libtremotesf::JniRpc::onGotFreeSpaceForPath ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JniRpc::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = swig_new_global_ref(jenv, "org/equeim/libtremotesf/JniRpc");
  if (!baseclass) return;
  static SwigDirectorMethod methods[] = {
    SwigDirectorMethod(jenv, baseclass, "onAboutToDisconnect", "()V"),
    SwigDirectorMethod(jenv, baseclass, "onConnectionStateChanged", "(Lorg/equeim/libtremotesf/RpcConnectionState;)V"),
    SwigDirectorMethod(jenv, baseclass, "onErrorChanged", "(Lorg/equeim/libtremotesf/RpcError;Ljava/lang/String;Ljava/lang/String;)V"),
    SwigDirectorMethod(jenv, baseclass, "onServerSettingsChanged", "(Lorg/equeim/libtremotesf/JniServerSettingsData;)V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentsUpdated", "(Lorg/equeim/libtremotesf/IntPairVector;Lorg/equeim/libtremotesf/TorrentDataVector;Lorg/equeim/libtremotesf/TorrentDataVector;)V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentFilesUpdated", "(ILorg/equeim/libtremotesf/TorrentFilesVector;)V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentPeersUpdated", "(ILorg/equeim/libtremotesf/IntPairVector;Lorg/equeim/libtremotesf/TorrentPeersVector;Lorg/equeim/libtremotesf/TorrentPeersVector;)V"),
    SwigDirectorMethod(jenv, baseclass, "onServerStatsUpdated", "(JJLorg/equeim/libtremotesf/SessionStats;Lorg/equeim/libtremotesf/SessionStats;)V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentAdded", "(ILjava/lang/String;Ljava/lang/String;)V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentFinished", "(ILjava/lang/String;Ljava/lang/String;)V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentAddDuplicate", "()V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentAddError", "()V"),
    SwigDirectorMethod(jenv, baseclass, "onTorrentFileRenamed", "(ILjava/lang/String;Ljava/lang/String;)V"),
    SwigDirectorMethod(jenv, baseclass, "onGotDownloadDirFreeSpace", "(J)V"),
    SwigDirectorMethod(jenv, baseclass, "onGotFreeSpaceForPath", "(Ljava/lang/String;ZJ)V")
  };
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 15; ++i) {
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].name, methods[i].desc);
        swig_override[i] = methods[i].methid && (methid != methods[i].methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentDataVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< libtremotesf::TorrentData > *)new std::vector< libtremotesf::TorrentData >();
  *(std::vector< libtremotesf::TorrentData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentDataVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *arg1 = 0 ;
  std::vector< libtremotesf::TorrentData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentData > const & is null");
    return 0;
  } 
  result = (std::vector< libtremotesf::TorrentData > *)new std::vector< libtremotesf::TorrentData >((std::vector< libtremotesf::TorrentData > const &)*arg1);
  *(std::vector< libtremotesf::TorrentData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  std::vector< libtremotesf::TorrentData >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  result = ((std::vector< libtremotesf::TorrentData > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  std::vector< libtremotesf::TorrentData >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  arg2 = (std::vector< libtremotesf::TorrentData >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  result = (bool)((std::vector< libtremotesf::TorrentData > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentDataVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  std::vector< libtremotesf::TorrentData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData const & is null");
    return 0;
  } 
  try {
    result = (std::vector< libtremotesf::TorrentData > *)new_std_vector_Sl_libtremotesf_TorrentData_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(libtremotesf::TorrentData const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentData > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  try {
    result = std_vector_Sl_libtremotesf_TorrentData_Sg__doSize((std::vector< libtremotesf::TorrentData > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  std::vector< libtremotesf::TorrentData >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  arg2 = *(std::vector< libtremotesf::TorrentData >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentData >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_libtremotesf_TorrentData_Sg__doAdd__SWIG_0(arg1,(libtremotesf::TorrentData const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::TorrentData >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::TorrentData >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentData >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_libtremotesf_TorrentData_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::TorrentData const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::TorrentData >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_libtremotesf_TorrentData_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentData >::value_type **)&jresult = new std::vector< libtremotesf::TorrentData >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::TorrentData >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< libtremotesf::TorrentData >::value_type *) &std_vector_Sl_libtremotesf_TorrentData_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentData >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::TorrentData >::value_type *arg3 = 0 ;
  std::vector< libtremotesf::TorrentData >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::TorrentData >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentData >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_libtremotesf_TorrentData_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::TorrentData const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentData >::value_type **)&jresult = new std::vector< libtremotesf::TorrentData >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentDataVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_libtremotesf_TorrentData_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentDataVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtremotesf::TorrentData > *arg1 = (std::vector< libtremotesf::TorrentData > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtremotesf::TorrentData > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TrackersVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Tracker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< libtremotesf::Tracker > *)new std::vector< libtremotesf::Tracker >();
  *(std::vector< libtremotesf::Tracker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TrackersVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Tracker > *arg1 = 0 ;
  std::vector< libtremotesf::Tracker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Tracker > const & is null");
    return 0;
  } 
  result = (std::vector< libtremotesf::Tracker > *)new std::vector< libtremotesf::Tracker >((std::vector< libtremotesf::Tracker > const &)*arg1);
  *(std::vector< libtremotesf::Tracker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  std::vector< libtremotesf::Tracker >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  result = ((std::vector< libtremotesf::Tracker > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  std::vector< libtremotesf::Tracker >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  arg2 = (std::vector< libtremotesf::Tracker >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  result = (bool)((std::vector< libtremotesf::Tracker > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TrackersVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  libtremotesf::Tracker *arg2 = 0 ;
  std::vector< libtremotesf::Tracker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(libtremotesf::Tracker **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::Tracker const & is null");
    return 0;
  } 
  try {
    result = (std::vector< libtremotesf::Tracker > *)new_std_vector_Sl_libtremotesf_Tracker_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(libtremotesf::Tracker const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Tracker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  try {
    result = std_vector_Sl_libtremotesf_Tracker_Sg__doSize((std::vector< libtremotesf::Tracker > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  std::vector< libtremotesf::Tracker >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  arg2 = *(std::vector< libtremotesf::Tracker >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Tracker >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_libtremotesf_Tracker_Sg__doAdd__SWIG_0(arg1,(libtremotesf::Tracker const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::Tracker >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::Tracker >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Tracker >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_libtremotesf_Tracker_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::Tracker const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  jint arg2 ;
  SwigValueWrapper< libtremotesf::Tracker > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_libtremotesf_Tracker_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Tracker >::value_type **)&jresult = new std::vector< libtremotesf::Tracker >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::Tracker >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< libtremotesf::Tracker >::value_type *) &std_vector_Sl_libtremotesf_Tracker_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Tracker >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::Tracker >::value_type *arg3 = 0 ;
  SwigValueWrapper< libtremotesf::Tracker > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::Tracker >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Tracker >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_libtremotesf_Tracker_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::Tracker const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Tracker >::value_type **)&jresult = new std::vector< libtremotesf::Tracker >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TrackersVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_libtremotesf_Tracker_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TrackersVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtremotesf::Tracker > *arg1 = (std::vector< libtremotesf::Tracker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtremotesf::Tracker > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentFilesVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< libtremotesf::TorrentFile > *)new std::vector< libtremotesf::TorrentFile >();
  *(std::vector< libtremotesf::TorrentFile > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentFilesVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *arg1 = 0 ;
  std::vector< libtremotesf::TorrentFile > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentFile > const & is null");
    return 0;
  } 
  result = (std::vector< libtremotesf::TorrentFile > *)new std::vector< libtremotesf::TorrentFile >((std::vector< libtremotesf::TorrentFile > const &)*arg1);
  *(std::vector< libtremotesf::TorrentFile > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  std::vector< libtremotesf::TorrentFile >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  result = ((std::vector< libtremotesf::TorrentFile > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  std::vector< libtremotesf::TorrentFile >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  arg2 = (std::vector< libtremotesf::TorrentFile >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  result = (bool)((std::vector< libtremotesf::TorrentFile > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentFilesVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  libtremotesf::TorrentFile *arg2 = 0 ;
  std::vector< libtremotesf::TorrentFile > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(libtremotesf::TorrentFile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentFile const & is null");
    return 0;
  } 
  try {
    result = (std::vector< libtremotesf::TorrentFile > *)new_std_vector_Sl_libtremotesf_TorrentFile_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(libtremotesf::TorrentFile const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentFile > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  try {
    result = std_vector_Sl_libtremotesf_TorrentFile_Sg__doSize((std::vector< libtremotesf::TorrentFile > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  std::vector< libtremotesf::TorrentFile >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  arg2 = *(std::vector< libtremotesf::TorrentFile >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentFile >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_libtremotesf_TorrentFile_Sg__doAdd__SWIG_0(arg1,(libtremotesf::TorrentFile const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::TorrentFile >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::TorrentFile >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentFile >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_libtremotesf_TorrentFile_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::TorrentFile const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  jint arg2 ;
  SwigValueWrapper< libtremotesf::TorrentFile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_libtremotesf_TorrentFile_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentFile >::value_type **)&jresult = new std::vector< libtremotesf::TorrentFile >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::TorrentFile >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< libtremotesf::TorrentFile >::value_type *) &std_vector_Sl_libtremotesf_TorrentFile_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentFile >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::TorrentFile >::value_type *arg3 = 0 ;
  SwigValueWrapper< libtremotesf::TorrentFile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::TorrentFile >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentFile >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_libtremotesf_TorrentFile_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::TorrentFile const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::TorrentFile >::value_type **)&jresult = new std::vector< libtremotesf::TorrentFile >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFilesVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_libtremotesf_TorrentFile_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentFilesVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtremotesf::TorrentFile > *arg1 = (std::vector< libtremotesf::TorrentFile > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtremotesf::TorrentFile > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentPeersVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Peer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< libtremotesf::Peer > *)new std::vector< libtremotesf::Peer >();
  *(std::vector< libtremotesf::Peer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentPeersVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Peer > *arg1 = 0 ;
  std::vector< libtremotesf::Peer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Peer > const & is null");
    return 0;
  } 
  result = (std::vector< libtremotesf::Peer > *)new std::vector< libtremotesf::Peer >((std::vector< libtremotesf::Peer > const &)*arg1);
  *(std::vector< libtremotesf::Peer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  std::vector< libtremotesf::Peer >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  result = ((std::vector< libtremotesf::Peer > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  std::vector< libtremotesf::Peer >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  arg2 = (std::vector< libtremotesf::Peer >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  result = (bool)((std::vector< libtremotesf::Peer > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1TorrentPeersVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  libtremotesf::Peer *arg2 = 0 ;
  std::vector< libtremotesf::Peer > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(libtremotesf::Peer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::Peer const & is null");
    return 0;
  } 
  try {
    result = (std::vector< libtremotesf::Peer > *)new_std_vector_Sl_libtremotesf_Peer_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(libtremotesf::Peer const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Peer > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  try {
    result = std_vector_Sl_libtremotesf_Peer_Sg__doSize((std::vector< libtremotesf::Peer > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  std::vector< libtremotesf::Peer >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  arg2 = *(std::vector< libtremotesf::Peer >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Peer >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_libtremotesf_Peer_Sg__doAdd__SWIG_0(arg1,(libtremotesf::Peer const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::Peer >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::Peer >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Peer >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_libtremotesf_Peer_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::Peer const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  jint arg2 ;
  SwigValueWrapper< libtremotesf::Peer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_libtremotesf_Peer_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Peer >::value_type **)&jresult = new std::vector< libtremotesf::Peer >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::Peer >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< libtremotesf::Peer >::value_type *) &std_vector_Sl_libtremotesf_Peer_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Peer >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  jint arg2 ;
  std::vector< libtremotesf::Peer >::value_type *arg3 = 0 ;
  SwigValueWrapper< libtremotesf::Peer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< libtremotesf::Peer >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Peer >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_libtremotesf_Peer_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(libtremotesf::Peer const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< libtremotesf::Peer >::value_type **)&jresult = new std::vector< libtremotesf::Peer >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentPeersVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_libtremotesf_Peer_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentPeersVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libtremotesf::Peer > *arg1 = (std::vector< libtremotesf::Peer > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libtremotesf::Peer > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1StringsVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< QString > *)new std::vector< QString >();
  *(std::vector< QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1StringsVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< QString > *arg1 = 0 ;
  std::vector< QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< QString > const & is null");
    return 0;
  } 
  result = (std::vector< QString > *)new std::vector< QString >((std::vector< QString > const &)*arg1);
  *(std::vector< QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  std::vector< QString >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  result = ((std::vector< QString > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  std::vector< QString >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = (std::vector< QString >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  result = (bool)((std::vector< QString > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1StringsVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  QString *arg2 = 0 ;
  std::vector< QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return 0;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  try {
    result = (std::vector< QString > *)new_std_vector_Sl_QString_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(QString const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  try {
    result = std_vector_Sl_QString_Sg__doSize((std::vector< QString > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  std::vector< QString >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  std_vector_Sl_QString_Sg__doAdd__SWIG_0(arg1,(QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  jint arg2 ;
  std::vector< QString >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  try {
    std_vector_Sl_QString_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(QString const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  jint arg2 ;
  std::vector< QString >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_QString_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  static_assert(sizeof(std::remove_pointer_t<decltype((&result)->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>((&result)->utf16()), static_cast<jsize>((&result)->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  jint arg2 ;
  std::vector< QString >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< QString >::value_type *) &std_vector_Sl_QString_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  jint arg2 ;
  std::vector< QString >::value_type *arg3 = 0 ;
  std::vector< QString >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return 0;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  try {
    result = std_vector_Sl_QString_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(QString const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  static_assert(sizeof(std::remove_pointer_t<decltype((&result)->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>((&result)->utf16()), static_cast<jsize>((&result)->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringsVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< QString > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_QString_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1StringsVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< QString > *arg1 = (std::vector< QString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< QString > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1StringMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< QString,QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< QString,QString > *)new std::map< QString,QString >();
  *(std::map< QString,QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1StringMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< QString,QString > *arg1 = 0 ;
  std::map< QString,QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< QString,QString > const & is null");
    return 0;
  } 
  result = (std::map< QString,QString > *)new std::map< QString,QString >((std::map< QString,QString > const &)*arg1);
  *(std::map< QString,QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< QString,QString >::iterator *arg1 = (std::map< QString,QString >::iterator *) 0 ;
  std::map< QString,QString,std::less< QString > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString >::iterator **)&jarg1; 
  result = std_map_Sl_QString_Sc_QString_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< QString,QString,std::less< QString > >::iterator **)&jresult = new std::map< QString,QString,std::less< QString > >::iterator(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< QString,QString >::iterator *arg1 = (std::map< QString,QString >::iterator *) 0 ;
  std::map< QString,QString >::iterator arg2 ;
  std::map< QString,QString >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< QString,QString >::iterator **)&jarg1; 
  argp2 = *(std::map< QString,QString >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< QString,QString >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_QString_Sc_QString_Sg__iterator_isNot((std::map< QString,QString >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< QString,QString >::iterator *arg1 = (std::map< QString,QString >::iterator *) 0 ;
  QString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString >::iterator **)&jarg1; 
  result = std_map_Sl_QString_Sc_QString_Sg__iterator_getKey((std::map< QString,QString >::iterator const *)arg1);
  
  static_assert(sizeof(std::remove_pointer_t<decltype((&result)->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>((&result)->utf16()), static_cast<jsize>((&result)->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< QString,QString >::iterator *arg1 = (std::map< QString,QString >::iterator *) 0 ;
  QString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString >::iterator **)&jarg1; 
  result = std_map_Sl_QString_Sc_QString_Sg__iterator_getValue((std::map< QString,QString >::iterator const *)arg1);
  
  static_assert(sizeof(std::remove_pointer_t<decltype((&result)->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>((&result)->utf16()), static_cast<jsize>((&result)->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< QString,QString >::iterator *arg1 = (std::map< QString,QString >::iterator *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString >::iterator **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  std_map_Sl_QString_Sc_QString_Sg__iterator_setValue(arg1,(QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1StringMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< QString,QString >::iterator *arg1 = (std::map< QString,QString >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< QString,QString >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  result = (bool)((std::map< QString,QString > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  QString *arg2 = 0 ;
  std::map< QString,QString >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return 0;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (arg1)->find((QString const &)*arg2);
  *(std::map< QString,QString >::iterator **)&jresult = new std::map< QString,QString >::iterator(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  std::map< QString,QString >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< QString,QString >::iterator **)&jresult = new std::map< QString,QString >::iterator(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  std::map< QString,QString >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< QString,QString >::iterator **)&jresult = new std::map< QString,QString >::iterator(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  try {
    result = std_map_Sl_QString_Sc_QString_Sg__sizeImpl((std::map< QString,QString > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return 0;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (bool)std_map_Sl_QString_Sc_QString_Sg__containsImpl(arg1,(QString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  std_map_Sl_QString_Sc_QString_Sg__putUnchecked(arg1,(QString const &)*arg2,(QString const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_StringMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  std::map< QString,QString,std::less< QString > >::iterator arg2 ;
  std::map< QString,QString,std::less< QString > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  argp2 = *(std::map< QString,QString,std::less< QString > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< QString,QString,std::less< QString > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_QString_Sc_QString_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1StringMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< QString,QString > *arg1 = (std::map< QString,QString > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< QString,QString > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int,int > *)new std::pair< int,int >();
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,int > *arg1 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,int > const & is null");
    return 0;
  } 
  result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1IntPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  try {
    result = std_vector_Sl_int_Sg__doSize((std::vector< int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_int_Sg__doAdd__SWIG_0(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_int_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntPairVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >();
  *(std::vector< std::pair< int,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntPairVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > > const & is null");
    return 0;
  } 
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >((std::vector< std::pair< int,int > > const &)*arg1);
  *(std::vector< std::pair< int,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  result = ((std::vector< std::pair< int,int > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = (std::vector< std::pair< int,int > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  result = (bool)((std::vector< std::pair< int,int > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1IntPairVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::pair< int,int > *arg2 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::pair< int,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,int > const & is null");
    return 0;
  } 
  try {
    result = (std::vector< std::pair< int,int > > *)new_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg___SWIG_2(SWIG_STD_MOVE(arg1),(std::pair< int,int > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::pair< int,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doSize((std::vector< std::pair< int,int > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< int,int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > >::value_type const & is null");
    return ;
  } 
  std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doAdd__SWIG_0(arg1,(std::pair< int,int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  jint arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::pair< int,int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > >::value_type const & is null");
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(std::pair< int,int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  jint arg2 ;
  std::vector< std::pair< int,int > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::pair< int,int > >::value_type **)&jresult = new std::vector< std::pair< int,int > >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  jint arg2 ;
  std::vector< std::pair< int,int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::pair< int,int > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::pair< int,int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  jint arg2 ;
  std::vector< std::pair< int,int > >::value_type *arg3 = 0 ;
  std::vector< std::pair< int,int > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::pair< int,int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > >::value_type const & is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(std::pair< int,int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::pair< int,int > >::value_type **)&jresult = new std::vector< std::pair< int,int > >::value_type(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_IntPairVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1IntPairVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< int,int > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Peer **)&jarg1; 
  result = (QString *) & ((arg1)->address);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1client_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Peer **)&jarg1; 
  result = (QString *) & ((arg1)->client);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1downloadSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Peer **)&jarg1; 
  result = (qint64) ((arg1)->downloadSpeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1uploadSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Peer **)&jarg1; 
  result = (qint64) ((arg1)->uploadSpeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Peer **)&jarg1; 
  result = (double) ((arg1)->progress);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Peer_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Peer **)&jarg1; 
  result = (QString *) & ((arg1)->flags);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1Peer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::Peer *arg1 = (libtremotesf::Peer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::Peer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  std::vector< QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1; 
  result = (std::vector< QString > *)& ((arg1)->path);
  *(std::vector< QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1; 
  result = (qint64) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1completedSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1; 
  result = (qint64) ((arg1)->completedSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  libtremotesf::TorrentFile::Priority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1; 
  result = (libtremotesf::TorrentFile::Priority) ((arg1)->priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentFile_1wanted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1; 
  result = (bool) ((arg1)->wanted);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::TorrentFile *arg1 = (libtremotesf::TorrentFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (int)((libtremotesf::Tracker const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (QString *) &((libtremotesf::Tracker const *)arg1)->announce();
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1site(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (QString *) &((libtremotesf::Tracker const *)arg1)->site();
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  libtremotesf::Tracker::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (libtremotesf::Tracker::Status)((libtremotesf::Tracker const *)arg1)->status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1errorMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  QString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = ((libtremotesf::Tracker const *)arg1)->errorMessage();
  
  static_assert(sizeof(std::remove_pointer_t<decltype((&result)->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>((&result)->utf16()), static_cast<jsize>((&result)->size()));
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (int)((libtremotesf::Tracker const *)arg1)->peers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1seeders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (int)((libtremotesf::Tracker const *)arg1)->seeders();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1leechers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (int)((libtremotesf::Tracker const *)arg1)->leechers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_Tracker_1nextUpdateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  result = (QDateTime *) &((libtremotesf::Tracker const *)arg1)->nextUpdateTime();
  
  if (result->isValid()) {
    jresult = static_cast<jlong>(result->toMSecsSinceEpoch());
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1Tracker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::Tracker *arg1 = (libtremotesf::Tracker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::Tracker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1hashString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QString *) & ((arg1)->hashString);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QString *) & ((arg1)->name);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1magnetLink_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QString *) & ((arg1)->magnetLink);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  libtremotesf::TorrentData::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (libtremotesf::TorrentData::Status) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  libtremotesf::TorrentData::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (libtremotesf::TorrentData::Error) ((arg1)->error);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1errorString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QString *) & ((arg1)->errorString);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1queuePosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->queuePosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1totalSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->totalSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1completedSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->completedSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1leftUntilDone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->leftUntilDone);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1sizeWhenDone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->sizeWhenDone);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1percentDone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (double) ((arg1)->percentDone);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1recheckProgress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (double) ((arg1)->recheckProgress);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1eta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->eta);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1metadataComplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool) ((arg1)->metadataComplete);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1downloadSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->downloadSpeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1uploadSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->uploadSpeed);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1downloadSpeedLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool) ((arg1)->downloadSpeedLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1downloadSpeedLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->downloadSpeedLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1uploadSpeedLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool) ((arg1)->uploadSpeedLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1uploadSpeedLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->uploadSpeedLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1totalDownloaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->totalDownloaded);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1totalUploaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (qint64) ((arg1)->totalUploaded);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1ratio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (double) ((arg1)->ratio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1ratioLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (double) ((arg1)->ratioLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1ratioLimitMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  libtremotesf::TorrentData::RatioLimitMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (libtremotesf::TorrentData::RatioLimitMode) ((arg1)->ratioLimitMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1totalSeedersFromTrackersCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->totalSeedersFromTrackersCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1peersSendingToUsCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->peersSendingToUsCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1webSeeders_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  std::vector< QString > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (std::vector< QString > *)& ((arg1)->webSeeders);
  *(std::vector< QString > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1webSeedersSendingToUsCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->webSeedersSendingToUsCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1totalLeechersFromTrackersCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->totalLeechersFromTrackersCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1peersGettingFromUsCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->peersGettingFromUsCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1peersLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->peersLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1addedDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QDateTime *) & ((arg1)->addedDate);
  
  if (result->isValid()) {
    jresult = static_cast<jlong>(result->toMSecsSinceEpoch());
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1activityDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QDateTime *) & ((arg1)->activityDate);
  
  if (result->isValid()) {
    jresult = static_cast<jlong>(result->toMSecsSinceEpoch());
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1doneDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QDateTime *) & ((arg1)->doneDate);
  
  if (result->isValid()) {
    jresult = static_cast<jlong>(result->toMSecsSinceEpoch());
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1idleSeedingLimitMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  libtremotesf::TorrentData::IdleSeedingLimitMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (libtremotesf::TorrentData::IdleSeedingLimitMode) ((arg1)->idleSeedingLimitMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1idleSeedingLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (int) ((arg1)->idleSeedingLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1downloadDirectory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QString *) & ((arg1)->downloadDirectory);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1comment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QString *) & ((arg1)->comment);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1creator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QString *) & ((arg1)->creator);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1creationDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  QDateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (QDateTime *) & ((arg1)->creationDate);
  
  if (result->isValid()) {
    jresult = static_cast<jlong>(result->toMSecsSinceEpoch());
  } else {
    jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1bandwidthPriority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  libtremotesf::TorrentData::Priority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (libtremotesf::TorrentData::Priority) ((arg1)->bandwidthPriority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1honorSessionLimits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool) ((arg1)->honorSessionLimits);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1singleFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool) ((arg1)->singleFile);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1trackers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  std::vector< libtremotesf::Tracker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (std::vector< libtremotesf::Tracker > *)& ((arg1)->trackers);
  *(std::vector< libtremotesf::Tracker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1hasError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool)((libtremotesf::TorrentData const *)arg1)->hasError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1isFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool)((libtremotesf::TorrentData const *)arg1)->isFinished();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1isDownloadingStalled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool)((libtremotesf::TorrentData const *)arg1)->isDownloadingStalled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_TorrentData_1isSeedingStalled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  result = (bool)((libtremotesf::TorrentData const *)arg1)->isSeedingStalled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1TorrentData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::TorrentData *arg1 = (libtremotesf::TorrentData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::TorrentData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QString *) & ((arg1)->address);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (int) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1apiPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->apiPath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1apiPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QString *) & ((arg1)->apiPath);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  libtremotesf::ConnectionConfiguration::ProxyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = (libtremotesf::ConnectionConfiguration::ProxyType)jarg2; 
  if (arg1) (arg1)->proxyType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  libtremotesf::ConnectionConfiguration::ProxyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (libtremotesf::ConnectionConfiguration::ProxyType) ((arg1)->proxyType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyHostname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->proxyHostname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyHostname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QString *) & ((arg1)->proxyHostname);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->proxyPort = arg2;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (int) ((arg1)->proxyPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyUser_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->proxyUser = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyUser_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QString *) & ((arg1)->proxyUser);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->proxyPassword = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1proxyPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QString *) & ((arg1)->proxyPassword);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1https_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->https = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1https_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (bool) ((arg1)->https);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1selfSignedCertificateEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->selfSignedCertificateEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1selfSignedCertificateEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (bool) ((arg1)->selfSignedCertificateEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1selfSignedCertificate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QByteArray *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QByteArray");
    return ;
  }
  jbyte* arg2_pstr = jenv->GetByteArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QByteArray arg2_str(QByteArray::fromRawData(reinterpret_cast<const char*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  
  if (arg1) (arg1)->selfSignedCertificate = *arg2;
}


SWIGEXPORT jbyteArray JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1selfSignedCertificate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QByteArray *) & ((arg1)->selfSignedCertificate);
  
  jresult = jenv->NewByteArray(static_cast<jsize>(result->size()));
  jenv->SetByteArrayRegion(jresult, 0, static_cast<jsize>(result->size()), reinterpret_cast<const jbyte*>(result->constData()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1clientCertificateEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->clientCertificateEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1clientCertificateEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (bool) ((arg1)->clientCertificateEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1clientCertificate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QByteArray *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null QByteArray");
    return ;
  }
  jbyte* arg2_pstr = jenv->GetByteArrayElements(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetArrayLength(jarg2);
  QByteArray arg2_str(QByteArray::fromRawData(reinterpret_cast<const char*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  
  if (arg1) (arg1)->clientCertificate = *arg2;
}


SWIGEXPORT jbyteArray JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1clientCertificate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QByteArray *) & ((arg1)->clientCertificate);
  
  jresult = jenv->NewByteArray(static_cast<jsize>(result->size()));
  jenv->SetByteArrayRegion(jresult, 0, static_cast<jsize>(result->size()), reinterpret_cast<const jbyte*>(result->constData()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1authentication_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->authentication = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1authentication_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (bool) ((arg1)->authentication);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QString *) & ((arg1)->username);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (QString *) & ((arg1)->password);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1updateInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->updateInterval = arg2;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1updateInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (int) ((arg1)->updateInterval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (int) ((arg1)->timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1autoReconnectEnabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoReconnectEnabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1autoReconnectEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (bool) ((arg1)->autoReconnectEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1autoReconnectInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->autoReconnectInterval = arg2;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1autoReconnectInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  result = (int) ((arg1)->autoReconnectInterval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ConnectionConfiguration_1swigEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  libtremotesf::ConnectionConfiguration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  arg2 = *(libtremotesf::ConnectionConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::ConnectionConfiguration const & is null");
    return 0;
  } 
  result = (bool)((libtremotesf::ConnectionConfiguration const *)arg1)->operator ==((libtremotesf::ConnectionConfiguration const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1ConnectionConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtremotesf::ConnectionConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libtremotesf::ConnectionConfiguration *)new libtremotesf::ConnectionConfiguration();
  *(libtremotesf::ConnectionConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1ConnectionConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::ConnectionConfiguration *arg1 = (libtremotesf::ConnectionConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::ConnectionConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1canRenameFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettingsData const *)arg1)->canRenameFiles();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1canShowFreeSpaceForPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettingsData const *)arg1)->canShowFreeSpaceForPath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1hasSessionIdFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettingsData const *)arg1)->hasSessionIdFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1hasTableMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool)((libtremotesf::ServerSettingsData const *)arg1)->hasTableMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1rpcVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->rpcVersion);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1minimumRpcVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->minimumRpcVersion);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1downloadDirectory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (QString *) & ((arg1)->downloadDirectory);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1startAddedTorrents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->startAddedTorrents);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1trashTorrentFiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->trashTorrentFiles);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1renameIncompleteFiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->renameIncompleteFiles);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1incompleteDirectoryEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->incompleteDirectoryEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1incompleteDirectory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  QString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (QString *) & ((arg1)->incompleteDirectory);
  
  static_assert(sizeof(std::remove_pointer_t<decltype(result->utf16())>) == sizeof(jchar));
  jresult = jenv->NewString(reinterpret_cast<const jchar*>(result->utf16()), static_cast<jsize>(result->size()));
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1ratioLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->ratioLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1ratioLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (double) ((arg1)->ratioLimit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1idleSeedingLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->idleSeedingLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1idleSeedingLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->idleSeedingLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1downloadQueueEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->downloadQueueEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1downloadQueueSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->downloadQueueSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1seedQueueEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->seedQueueEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1seedQueueSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->seedQueueSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1idleQueueLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->idleQueueLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1idleQueueLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->idleQueueLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1downloadSpeedLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->downloadSpeedLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1downloadSpeedLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->downloadSpeedLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1uploadSpeedLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->uploadSpeedLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1uploadSpeedLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->uploadSpeedLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1alternativeSpeedLimitsEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->alternativeSpeedLimitsEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1alternativeDownloadSpeedLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->alternativeDownloadSpeedLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1alternativeUploadSpeedLimit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->alternativeUploadSpeedLimit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1alternativeSpeedLimitsScheduled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->alternativeSpeedLimitsScheduled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1alternativeSpeedLimitsBeginTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  QTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (QTime *) & ((arg1)->alternativeSpeedLimitsBeginTime);
  
  jresult = static_cast<jlong>(result->msecsSinceStartOfDay()) * jlong{
    1000000
  };
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1alternativeSpeedLimitsEndTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  QTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (QTime *) & ((arg1)->alternativeSpeedLimitsEndTime);
  
  jresult = static_cast<jlong>(result->msecsSinceStartOfDay()) * jlong{
    1000000
  };
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1alternativeSpeedLimitsDays_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  libtremotesf::ServerSettingsData::AlternativeSpeedLimitsDays result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (libtremotesf::ServerSettingsData::AlternativeSpeedLimitsDays) ((arg1)->alternativeSpeedLimitsDays);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1peerPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->peerPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1randomPortEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->randomPortEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1portForwardingEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->portForwardingEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1encryptionMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  libtremotesf::ServerSettingsData::EncryptionMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (libtremotesf::ServerSettingsData::EncryptionMode) ((arg1)->encryptionMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1utpEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->utpEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1pexEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->pexEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1dhtEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->dhtEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1lpdEnabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (bool) ((arg1)->lpdEnabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1maximumPeersPerTorrent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->maximumPeersPerTorrent);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_ServerSettingsData_1maximumPeersGlobally_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  result = (int) ((arg1)->maximumPeersGlobally);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1ServerSettingsData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::ServerSettingsData *arg1 = (libtremotesf::ServerSettingsData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::ServerSettingsData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1downloaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (qint64)((libtremotesf::SessionStats const *)arg1)->downloaded();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1uploaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  qint64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (qint64)((libtremotesf::SessionStats const *)arg1)->uploaded();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (int)((libtremotesf::SessionStats const *)arg1)->duration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_SessionStats_1sessionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  result = (int)((libtremotesf::SessionStats const *)arg1)->sessionCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1SessionStats(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtremotesf::SessionStats *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libtremotesf::SessionStats *)new libtremotesf::SessionStats();
  *(libtremotesf::SessionStats **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1SessionStats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::SessionStats *arg1 = (libtremotesf::SessionStats *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::SessionStats **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1JniServerSettingsData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtremotesf::JniServerSettingsData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libtremotesf::JniServerSettingsData *)new libtremotesf::JniServerSettingsData();
  *(libtremotesf::JniServerSettingsData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setDownloadDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->setDownloadDirectory((QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setStartAddedTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStartAddedTorrents(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setTrashTorrentFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTrashTorrentFiles(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setRenameIncompleteFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRenameIncompleteFiles(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setIncompleteDirectoryEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncompleteDirectoryEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setIncompleteDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->setIncompleteDirectory((QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setRatioLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRatioLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setRatioLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRatioLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setIdleSeedingLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdleSeedingLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setIdleSeedingLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdleSeedingLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setDownloadQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDownloadQueueEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setDownloadQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDownloadQueueSize(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setSeedQueueEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSeedQueueEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setSeedQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSeedQueueSize(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setIdleQueueLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIdleQueueLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setIdleQueueLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdleQueueLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setDownloadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDownloadSpeedLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDownloadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setUploadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUploadSpeedLimited(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUploadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setAlternativeSpeedLimitsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAlternativeSpeedLimitsEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setAlternativeDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAlternativeDownloadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setAlternativeUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAlternativeUploadSpeedLimit(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setAlternativeSpeedLimitsScheduled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAlternativeSpeedLimitsScheduled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setAlternativeSpeedLimitsBeginTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  QTime arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  
  arg2 = QTime::fromMSecsSinceStartOfDay(static_cast<int>(jarg2 / jlong{
    1000000
  }));
  
  (arg1)->setAlternativeSpeedLimitsBeginTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setAlternativeSpeedLimitsEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  QTime arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  
  arg2 = QTime::fromMSecsSinceStartOfDay(static_cast<int>(jarg2 / jlong{
    1000000
  }));
  
  (arg1)->setAlternativeSpeedLimitsEndTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setAlternativeSpeedLimitsDays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  libtremotesf::ServerSettingsData::AlternativeSpeedLimitsDays arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (libtremotesf::ServerSettingsData::AlternativeSpeedLimitsDays)jarg2; 
  (arg1)->setAlternativeSpeedLimitsDays(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setPeerPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPeerPort(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setRandomPortEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRandomPortEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setPortForwardingEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPortForwardingEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setEncryptionMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  libtremotesf::ServerSettingsData::EncryptionMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (libtremotesf::ServerSettingsData::EncryptionMode)jarg2; 
  (arg1)->setEncryptionMode(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setUtpEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUtpEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setPexEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPexEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setDhtEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDhtEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setLpdEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLpdEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setMaximumPeersPerTorrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumPeersPerTorrent(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1setMaximumPeersGlobally(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumPeersGlobally(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1JniServerSettingsData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::JniServerSettingsData *arg1 = (libtremotesf::JniServerSettingsData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::JniServerSettingsData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_new_1JniRpc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libtremotesf::JniRpc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libtremotesf::JniRpc *)new SwigDirector_JniRpc(jenv);
  *(libtremotesf::JniRpc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_delete_1JniRpc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setConnectionConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::ConnectionConfiguration *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::ConnectionConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::ConnectionConfiguration const & is null");
    return ;
  } 
  (arg1)->setConnectionConfiguration((libtremotesf::ConnectionConfiguration const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1resetConnectionConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->resetConnectionConfiguration();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->connect();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->disconnect();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setUpdateDisabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUpdateDisabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1addTorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jint jarg8, jboolean jarg9) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  std::vector< int > *arg6 = 0 ;
  std::map< QString,QString,std::less< QString > > *arg7 = 0 ;
  libtremotesf::TorrentData::Priority arg8 ;
  bool arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(std::vector< int > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  arg5 = *(std::vector< int > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  arg6 = *(std::vector< int > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  arg7 = *(std::map< QString,QString,std::less< QString > > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< QString,QString,std::less< QString > > const & is null");
    return ;
  } 
  arg8 = (libtremotesf::TorrentData::Priority)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->addTorrentFile(arg2,(QString const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5,(std::vector< int > const &)*arg6,(std::map< QString,QString,std::less< QString > > const &)*arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1addTorrentLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jboolean jarg5) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  libtremotesf::TorrentData::Priority arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = (libtremotesf::TorrentData::Priority)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->addTorrentLink((QString const &)*arg2,(QString const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1startTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  (arg1)->startTorrents((std::vector< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1startTorrentsNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  (arg1)->startTorrentsNow((std::vector< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1pauseTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  (arg1)->pauseTorrents((std::vector< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1removeTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeTorrents((std::vector< int > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1checkTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  (arg1)->checkTorrents((std::vector< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1reannounceTorrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  (arg1)->reannounceTorrents((std::vector< int > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentsLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< int > *arg2 = 0 ;
  QString *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = jarg4 ? true : false; 
  (arg1)->setTorrentsLocation((std::vector< int > const &)*arg2,(QString const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1renameTorrentFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg4_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg4_pstr), arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  (arg1)->renameTorrentFile(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1getDownloadDirFreeSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->getDownloadDirFreeSpace();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1getFreeSpaceForPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->getFreeSpaceForPath((QString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentDownloadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentDownloadSpeedLimited(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentDownloadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentDownloadSpeedLimit(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentUploadSpeedLimited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentUploadSpeedLimited(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentUploadSpeedLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentUploadSpeedLimit(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentRatioLimitMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  libtremotesf::TorrentData::RatioLimitMode arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (libtremotesf::TorrentData::RatioLimitMode)jarg3; 
  (arg1)->setTorrentRatioLimitMode(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentRatioLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->setTorrentRatioLimit(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentPeersLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentPeersLimit(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentHonorSessionLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentHonorSessionLimits(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentBandwidthPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  libtremotesf::TorrentData::Priority arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (libtremotesf::TorrentData::Priority)jarg3; 
  (arg1)->setTorrentBandwidthPriority(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentIdleSeedingLimitMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  libtremotesf::TorrentData::IdleSeedingLimitMode arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (libtremotesf::TorrentData::IdleSeedingLimitMode)jarg3; 
  (arg1)->setTorrentIdleSeedingLimitMode(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentIdleSeedingLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->setTorrentIdleSeedingLimit(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentFilesEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentFilesEnabled(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentFilesWanted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = *(std::vector< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->setTorrentFilesWanted(*arg2,(std::vector< int > const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentFilesPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  libtremotesf::TorrentFile::Priority arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = *(std::vector< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  arg4 = (libtremotesf::TorrentFile::Priority)jarg4; 
  (arg1)->setTorrentFilesPriority(*arg2,(std::vector< int > const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1torrentAddTrackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  std::vector< QString > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = *(std::vector< QString > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< QString > const & is null");
    return ;
  } 
  (arg1)->torrentAddTrackers(*arg2,(std::vector< QString > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1torrentSetTracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg4_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg4_pstr), arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  (arg1)->torrentSetTracker(*arg2,arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1torrentRemoveTrackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = *(std::vector< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & is null");
    return ;
  } 
  (arg1)->torrentRemoveTrackers(*arg2,(std::vector< int > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1setTorrentPeersEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::TorrentData *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(libtremotesf::TorrentData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setTorrentPeersEnabled(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1updateData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  (arg1)->updateData();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onAboutToDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onAboutToDisconnect();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onConnectionStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::RpcConnectionState arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (libtremotesf::RpcConnectionState)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onConnectionStateChanged(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onErrorChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::RpcError arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (libtremotesf::RpcError)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg4_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg4_pstr), arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onErrorChanged(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onServerSettingsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  libtremotesf::JniServerSettingsData arg2 ;
  libtremotesf::JniServerSettingsData *argp2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  argp2 = *(libtremotesf::JniServerSettingsData **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtremotesf::JniServerSettingsData");
    return ;
  }
  arg2 = *argp2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onServerSettingsChanged(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentsUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  std::vector< libtremotesf::TorrentData > *arg3 = 0 ;
  std::vector< libtremotesf::TorrentData > *arg4 = 0 ;
  std::unique_ptr< std::vector< std::pair< int,int > > > rvrdeleter2 ;
  std::unique_ptr< std::vector< libtremotesf::TorrentData > > rvrdeleter3 ;
  std::unique_ptr< std::vector< libtremotesf::TorrentData > > rvrdeleter4 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = *(std::vector< std::pair< int,int > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > > && is null");
    return ;
  }
  rvrdeleter2.reset(arg2); 
  arg3 = *(std::vector< libtremotesf::TorrentData > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentData > && is null");
    return ;
  }
  rvrdeleter3.reset(arg3); 
  arg4 = *(std::vector< libtremotesf::TorrentData > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentData > && is null");
    return ;
  }
  rvrdeleter4.reset(arg4); 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentsUpdated((std::vector< std::pair< int,int > > &&)*arg2,(std::vector< libtremotesf::TorrentData > &&)*arg3,(std::vector< libtremotesf::TorrentData > &&)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentFilesUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  std::vector< libtremotesf::TorrentFile > *arg3 = 0 ;
  std::unique_ptr< std::vector< libtremotesf::TorrentFile > > rvrdeleter3 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libtremotesf::TorrentFile > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::TorrentFile > && is null");
    return ;
  }
  rvrdeleter3.reset(arg3); 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentFilesUpdated(arg2,(std::vector< libtremotesf::TorrentFile > &&)*arg3);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentPeersUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > > *arg3 = 0 ;
  std::vector< libtremotesf::Peer > *arg4 = 0 ;
  std::vector< libtremotesf::Peer > *arg5 = 0 ;
  std::unique_ptr< std::vector< std::pair< int,int > > > rvrdeleter3 ;
  std::unique_ptr< std::vector< libtremotesf::Peer > > rvrdeleter4 ;
  std::unique_ptr< std::vector< libtremotesf::Peer > > rvrdeleter5 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< int,int > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,int > > && is null");
    return ;
  }
  rvrdeleter3.reset(arg3); 
  arg4 = *(std::vector< libtremotesf::Peer > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Peer > && is null");
    return ;
  }
  rvrdeleter4.reset(arg4); 
  arg5 = *(std::vector< libtremotesf::Peer > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libtremotesf::Peer > && is null");
    return ;
  }
  rvrdeleter5.reset(arg5); 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentPeersUpdated(arg2,(std::vector< std::pair< int,int > > &&)*arg3,(std::vector< libtremotesf::Peer > &&)*arg4,(std::vector< libtremotesf::Peer > &&)*arg5);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onServerStatsUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  long long arg2 ;
  long long arg3 ;
  libtremotesf::SessionStats arg4 ;
  libtremotesf::SessionStats arg5 ;
  libtremotesf::SessionStats *argp4 ;
  libtremotesf::SessionStats *argp5 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (long long)jarg3; 
  argp4 = *(libtremotesf::SessionStats **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtremotesf::SessionStats");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(libtremotesf::SessionStats **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libtremotesf::SessionStats");
    return ;
  }
  arg5 = *argp5; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onServerStatsUpdated(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAdded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg4_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg4_pstr), arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAdded(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg4_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg4_pstr), arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentFinished(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAddDuplicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAddDuplicate();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentAddError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentAddError();
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onTorrentFileRenamed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (int)jarg2; 
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg3_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg3_pstr), arg3_len));
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg4_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg4_pstr), arg4_len));
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onTorrentFileRenamed(arg2,(QString const &)*arg3,(QString const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotDownloadDirFreeSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  long long arg2 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  arg2 = (long long)jarg2; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotDownloadDirFreeSpace(arg2);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1onGotFreeSpaceForPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  libtremotesf::JniRpc *arg1 = (libtremotesf::JniRpc *) 0 ;
  QString *arg2 = 0 ;
  bool arg3 ;
  long long arg4 ;
  SwigDirector_JniRpc *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::JniRpc **)&jarg1; 
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null String");
    return ;
  }
  const jchar* arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  static_assert(sizeof(char16_t) == sizeof(jchar));
  QString arg2_str(QString::fromUtf16(reinterpret_cast<const char16_t*>(arg2_pstr), arg2_len));
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  arg4 = (long long)jarg4; 
  darg = dynamic_cast<SwigDirector_JniRpc *>(arg1);
  (darg)->onGotFreeSpaceForPath((QString const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  libtremotesf::JniRpc *obj = *((libtremotesf::JniRpc **)&objarg);
  (void)jcls;
  SwigDirector_JniRpc *director = static_cast<SwigDirector_JniRpc *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniRpc_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  libtremotesf::JniRpc *obj = *((libtremotesf::JniRpc **)&objarg);
  SwigDirector_JniRpc *director = dynamic_cast<SwigDirector_JniRpc *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_moveFromVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentData *arg1 = 0 ;
  libtremotesf::TorrentData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentData & is null");
    return 0;
  } 
  result = libtremotesf::moveFromVector(*arg1);
  *(libtremotesf::TorrentData **)&jresult = new libtremotesf::TorrentData(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_moveFromVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::TorrentFile *arg1 = 0 ;
  SwigValueWrapper< libtremotesf::TorrentFile > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::TorrentFile **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::TorrentFile & is null");
    return 0;
  } 
  result = libtremotesf::moveFromVector(*arg1);
  *(libtremotesf::TorrentFile **)&jresult = new libtremotesf::TorrentFile(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_moveFromVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libtremotesf::Peer *arg1 = 0 ;
  SwigValueWrapper< libtremotesf::Peer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libtremotesf::Peer **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libtremotesf::Peer & is null");
    return 0;
  } 
  result = libtremotesf::moveFromVector(*arg1);
  *(libtremotesf::Peer **)&jresult = new libtremotesf::Peer(SWIG_STD_MOVE(result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_JniServerSettingsData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libtremotesf::ServerSettingsData **)&baseptr = *(libtremotesf::JniServerSettingsData **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_equeim_libtremotesf_libtremotesfJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[15] = {
    {
      "SwigDirector_JniRpc_onAboutToDisconnect", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onConnectionStateChanged", "(Lorg/equeim/libtremotesf/JniRpc;I)V" 
    },
    {
      "SwigDirector_JniRpc_onErrorChanged", "(Lorg/equeim/libtremotesf/JniRpc;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_JniRpc_onServerSettingsChanged", "(Lorg/equeim/libtremotesf/JniRpc;J)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentsUpdated", "(Lorg/equeim/libtremotesf/JniRpc;JJJ)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentFilesUpdated", "(Lorg/equeim/libtremotesf/JniRpc;IJ)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentPeersUpdated", "(Lorg/equeim/libtremotesf/JniRpc;IJJJ)V" 
    },
    {
      "SwigDirector_JniRpc_onServerStatsUpdated", "(Lorg/equeim/libtremotesf/JniRpc;JJJJ)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentAdded", "(Lorg/equeim/libtremotesf/JniRpc;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentFinished", "(Lorg/equeim/libtremotesf/JniRpc;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentAddDuplicate", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentAddError", "(Lorg/equeim/libtremotesf/JniRpc;)V" 
    },
    {
      "SwigDirector_JniRpc_onTorrentFileRenamed", "(Lorg/equeim/libtremotesf/JniRpc;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_JniRpc_onGotDownloadDirFreeSpace", "(Lorg/equeim/libtremotesf/JniRpc;J)V" 
    },
    {
      "SwigDirector_JniRpc_onGotFreeSpaceForPath", "(Lorg/equeim/libtremotesf/JniRpc;Ljava/lang/String;ZJ)V" 
    }
  };
  Swig::jclass_libtremotesfJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_libtremotesfJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

