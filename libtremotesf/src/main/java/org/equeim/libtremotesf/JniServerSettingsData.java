/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.equeim.libtremotesf;

public class JniServerSettingsData extends ServerSettingsData {
  private transient long swigCPtr;

  protected JniServerSettingsData(long cPtr, boolean cMemoryOwn) {
    super(libtremotesfJNI.JniServerSettingsData_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(JniServerSettingsData obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(JniServerSettingsData obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libtremotesfJNI.delete_JniServerSettingsData(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public JniServerSettingsData() {
    this(libtremotesfJNI.new_JniServerSettingsData(), true);
  }

  public void setDownloadDirectory(String directory) {
    libtremotesfJNI.JniServerSettingsData_setDownloadDirectory(swigCPtr, this, directory);
  }

  public void setStartAddedTorrents(boolean start) {
    libtremotesfJNI.JniServerSettingsData_setStartAddedTorrents(swigCPtr, this, start);
  }

  public void setTrashTorrentFiles(boolean trash) {
    libtremotesfJNI.JniServerSettingsData_setTrashTorrentFiles(swigCPtr, this, trash);
  }

  public void setRenameIncompleteFiles(boolean rename) {
    libtremotesfJNI.JniServerSettingsData_setRenameIncompleteFiles(swigCPtr, this, rename);
  }

  public void setIncompleteDirectoryEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setIncompleteDirectoryEnabled(swigCPtr, this, enabled);
  }

  public void setIncompleteDirectory(String directory) {
    libtremotesfJNI.JniServerSettingsData_setIncompleteDirectory(swigCPtr, this, directory);
  }

  public void setRatioLimited(boolean limited) {
    libtremotesfJNI.JniServerSettingsData_setRatioLimited(swigCPtr, this, limited);
  }

  public void setRatioLimit(double limit) {
    libtremotesfJNI.JniServerSettingsData_setRatioLimit(swigCPtr, this, limit);
  }

  public void setIdleSeedingLimited(boolean limited) {
    libtremotesfJNI.JniServerSettingsData_setIdleSeedingLimited(swigCPtr, this, limited);
  }

  public void setIdleSeedingLimit(int limit) {
    libtremotesfJNI.JniServerSettingsData_setIdleSeedingLimit(swigCPtr, this, limit);
  }

  public void setDownloadQueueEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setDownloadQueueEnabled(swigCPtr, this, enabled);
  }

  public void setDownloadQueueSize(int size) {
    libtremotesfJNI.JniServerSettingsData_setDownloadQueueSize(swigCPtr, this, size);
  }

  public void setSeedQueueEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setSeedQueueEnabled(swigCPtr, this, enabled);
  }

  public void setSeedQueueSize(int size) {
    libtremotesfJNI.JniServerSettingsData_setSeedQueueSize(swigCPtr, this, size);
  }

  public void setIdleQueueLimited(boolean limited) {
    libtremotesfJNI.JniServerSettingsData_setIdleQueueLimited(swigCPtr, this, limited);
  }

  public void setIdleQueueLimit(int limit) {
    libtremotesfJNI.JniServerSettingsData_setIdleQueueLimit(swigCPtr, this, limit);
  }

  public void setDownloadSpeedLimited(boolean limited) {
    libtremotesfJNI.JniServerSettingsData_setDownloadSpeedLimited(swigCPtr, this, limited);
  }

  public void setDownloadSpeedLimit(int limit) {
    libtremotesfJNI.JniServerSettingsData_setDownloadSpeedLimit(swigCPtr, this, limit);
  }

  public void setUploadSpeedLimited(boolean limited) {
    libtremotesfJNI.JniServerSettingsData_setUploadSpeedLimited(swigCPtr, this, limited);
  }

  public void setUploadSpeedLimit(int limit) {
    libtremotesfJNI.JniServerSettingsData_setUploadSpeedLimit(swigCPtr, this, limit);
  }

  public void setAlternativeSpeedLimitsEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setAlternativeSpeedLimitsEnabled(swigCPtr, this, enabled);
  }

  public void setAlternativeDownloadSpeedLimit(int limit) {
    libtremotesfJNI.JniServerSettingsData_setAlternativeDownloadSpeedLimit(swigCPtr, this, limit);
  }

  public void setAlternativeUploadSpeedLimit(int limit) {
    libtremotesfJNI.JniServerSettingsData_setAlternativeUploadSpeedLimit(swigCPtr, this, limit);
  }

  public void setAlternativeSpeedLimitsScheduled(boolean scheduled) {
    libtremotesfJNI.JniServerSettingsData_setAlternativeSpeedLimitsScheduled(swigCPtr, this, scheduled);
  }

  public void setAlternativeSpeedLimitsBeginTime(org.threeten.bp.LocalTime time) {
    libtremotesfJNI.JniServerSettingsData_setAlternativeSpeedLimitsBeginTime(swigCPtr, this, time.toNanoOfDay());
  }

  public void setAlternativeSpeedLimitsEndTime(org.threeten.bp.LocalTime time) {
    libtremotesfJNI.JniServerSettingsData_setAlternativeSpeedLimitsEndTime(swigCPtr, this, time.toNanoOfDay());
  }

  public void setAlternativeSpeedLimitsDays(ServerSettingsData.AlternativeSpeedLimitsDays days) {
    libtremotesfJNI.JniServerSettingsData_setAlternativeSpeedLimitsDays(swigCPtr, this, days.swigValue());
  }

  public void setPeerPort(int port) {
    libtremotesfJNI.JniServerSettingsData_setPeerPort(swigCPtr, this, port);
  }

  public void setRandomPortEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setRandomPortEnabled(swigCPtr, this, enabled);
  }

  public void setPortForwardingEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setPortForwardingEnabled(swigCPtr, this, enabled);
  }

  public void setEncryptionMode(ServerSettingsData.EncryptionMode mode) {
    libtremotesfJNI.JniServerSettingsData_setEncryptionMode(swigCPtr, this, mode.swigValue());
  }

  public void setUtpEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setUtpEnabled(swigCPtr, this, enabled);
  }

  public void setPexEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setPexEnabled(swigCPtr, this, enabled);
  }

  public void setDhtEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setDhtEnabled(swigCPtr, this, enabled);
  }

  public void setLpdEnabled(boolean enabled) {
    libtremotesfJNI.JniServerSettingsData_setLpdEnabled(swigCPtr, this, enabled);
  }

  public void setMaximumPeersPerTorrent(int peers) {
    libtremotesfJNI.JniServerSettingsData_setMaximumPeersPerTorrent(swigCPtr, this, peers);
  }

  public void setMaximumPeersGlobally(int peers) {
    libtremotesfJNI.JniServerSettingsData_setMaximumPeersGlobally(swigCPtr, this, peers);
  }

}
