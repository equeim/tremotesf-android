name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: fedora:latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install host dependencies
        run: |
          dnf -y --setopt=install_weak_deps=False install git gcc gcc-c++ make patch cmake ninja-build ccache 'pkgconfig(zlib)' 'cmake(double-conversion)' 'pkgconfig(libb2)' 'pkgconfig(libpcre2-posix)' 'cmake(Qt6HostInfo)' 'cmake(Qt6CoreTools)' 'cmake(Qt6WidgetsTools)' java-11-openjdk-devel unzip curl tar gzip which perl perl-FindBin perl-File-Basename

      - name: Check out
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Android SDK environment variables
        run: |
          readonly sdk="$RUNNER_TEMP/android-sdk"
          echo "ANDROID_SDK_ROOT=$sdk" >> "$GITHUB_ENV"
          echo "SDKMANAGER=$sdk/cmdline-tools/latest/bin/sdkmanager" >> "$GITHUB_ENV"

      - name: Restore Android SDK from cache
        id: android-sdk-cache
        uses: equeim/cache@v2-altered
        with:
          path: ${{ env.ANDROID_SDK_ROOT }}
          key: android-sdk-${{ runner.os }}-${{ hashFiles('**/*.gradle.kts', 'gradle-plugin/**/*.kt') }}
          restore-keys: android-sdk-${{ runner.os }}-
          save-cache: ${{ github.event_name == 'push' }}

      - name: Set up Android SDK
        if:  steps.android-sdk-cache.outputs.cache-restored == 'false'
        run: |
          curl -o cmdline-tools.zip 'https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip'
          unzip cmdline-tools.zip
          rm cmdline-tools.zip
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          mv cmdline-tools "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$SDKMANAGER" --licenses

      - name: Compute ccache cache key
        id: compute-ccache-key
        run: |
          files_hash='${{ hashFiles('**/*.gradle.kts', 'gradle-plugin/**/*.kt', '3rdparty/openssl/patches/*', '3rdparty/qt/patches/*') }}'
          ./.github/workflows/compute-ccache-key.sh "$files_hash"
          echo "::set-output name=files-hash::$files_hash"

      - name: Restore ccache directory from cache
        uses: equeim/cache@v2-altered
        with:
          path: ${{ runner.temp }}/.ccache
          key: ${{ env.CCACHE_CACHE_KEY }}
          restore-keys: ccache-${{ runner.os }}-
          save-cache: ${{ github.event_name == 'push' }}
          reevaluate-key-when-saving: true

      - name: Build the app
        uses: gradle/gradle-build-action@v2
        with:
          arguments: --info -P org.equeim.tremotesf.ccache=true build
          cache-read-only: ${{ github.event_name != 'push' }}
        env:
          GRADLE_USER_HOME: ${{ runner.temp }}/.gradle
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_DIR: ${{ runner.temp }}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 3
          CCACHE_MAXSIZE: 1G
          CCACHE_COMPILERCHECK: content

      - name: Remove old NDK versions and recalculate ccache cache key
        run: |
          # Remove old NDK versions so that we don't save them in cache
          old_versions=()
          readarray -d '' old_versions < <(find "$ANDROID_SDK_ROOT/ndk" -mindepth 1 -maxdepth 1 -type d -print0 | xargs -0 basename | LC_COLLATE=C.utf8 sort -nz | head -z -n -1)
          if (( ${#old_versions[@]} )); then
            for version in ${old_versions[@]}; do
              echo "Removing $version"
              "$SDKMANAGER" --uninstall "$version"
            done
          fi
          # Recompute ccache cache key with latest NDK
          ./.github/workflows/compute-ccache-key.sh '${{ steps.compute-ccache-key.outputs.files-hash }}'

      - name: Archive debug APKs
        uses: actions/upload-artifact@v2
        with:
          name: debug-apks
          path: app/build/outputs/apk/*/debug/*.apk

      - name: Archive test and lint reports
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: |
            app/build/reports/*
            billing/build/reports/*
            common/build/reports/*
            libtremotesf/build/reports/*
            rpc/build/reports/*
            torrentfile/build/reports/*
